//Standard C++
#include <ios>
#include <sstream>

//ROS
#include <ros/ros.h>

//ROS msg formats
#include <std_msgs/String.h>
#include <std_msgs/ColorRGBA.h>
#include <geometry_msgs/Point.h>
#include <sensor_msgs/PointCloud.h>
#include <visualization_msgs/MarkerArray.h>


//BOOST
#include <boost/foreach.hpp>

//PCL
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_ros/filters/voxel_grid.h>
#include <pcl_ros/filters/statistical_outlier_removal.h>
#include <pcl/search/kdtree.h>
#include <pcl/features/normal_3d_omp.h>
#include <pcl/surface/marching_cubes_rbf.h>

typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;
//  ros::NodeHandle nh;
sensor_msgs::PointCloud cloud;
    int marker_count=0;

class pubsub
{
public:
    pubsub();
    void subscriber_callback(const PointCloud::ConstPtr&);
    void subscriber_callback1(const visualization_msgs::MarkerArray::ConstPtr&);

private:
    ros::NodeHandle nh;
    ros::Subscriber subscriber;
    ros::Publisher points_publisher;
    ros::Publisher colors_publisher;
};

pubsub::pubsub() {
    points_publisher = nh.advertise<sensor_msgs::PointCloud>("/points", 1);
    colors_publisher = nh.advertise<sensor_msgs::PointCloud>("/colors",1);
    subscriber = nh.subscribe<visualization_msgs::MarkerArray> ("/occupied_cells_vis_array", 1, &pubsub::subscriber_callback1, this);

}

/*
void pubsub::subscriber_callback(const PointCloud::ConstPtr& raw)
{

    //Print original pointcloud information
    std::cout << "Original - \tHeight:" << raw->height
              << "\tWidth:" << raw->width
              << "\tFields: (" << pcl::getFieldsList(*raw) << ")."
              << std::endl;

    PointCloud::Ptr clean(new PointCloud);
    std::vector<int> indices;
    pcl::removeNaNFromPointCloud(*raw, *clean, indices);

    /*Print original pointcloud information
    std::cout << "Cleaned - \tHeight:" << clean->height
              << "\tWidth:" << clean->width
              << "\tFields: (" << pcl::getFieldsList(*clean) << ")."
              << std::endl;


    const PointCloud::Ptr filtered(new PointCloud);


    // Create the filtering object
    pcl::StatisticalOutlierRemoval<pcl::PointXYZRGB> sor;
    sor.setInputCloud (clean);
    sor.setMeanK (50);
    sor.setStddevMulThresh (1.0);
    sor.filter (*filtered);

    const PointCloud::Ptr voxelized(new PointCloud);

    pcl::VoxelGrid<pcl::PointXYZ> voxel;
    voxel.setInputCloud(clean);
    voxel.setLeafSize(0.01f, 0.01f, 0.01f);
    voxel.filter(*voxelized);

//    sensor_msgs::PointCloud2 output;
  //  pcl_conversions::fromPCL(*filtered, output);
    //publisher.publish(voxelized);
    //std::cout << filtered->points;


    std::cout << "Filtered - \tHeight:" << voxelized->height
              << "\tWidth:" << voxelized->width
              //<< "\tFields: (" << pcl::getFieldsList(*filtered) << ")."
              << std::endl;

    geometry_msgs::Point32 p;
    BOOST_FOREACH (const pcl::PointXYZ& pt, clean->points){
          //std::cout << pt.x << ", " << pt.y << ", " << pt.z << "\n";
          p.x = pt.x;ized->height
              << "\tWidth:" << voxelized->width
          p.y = pt.y;
          p.z = pt.z;
          cloud.points.push_back(p);
    }

    publisher.publish(cloud);
    cloud.points.clear();

}
*/
void pubsub::subscriber_callback1(const visualization_msgs::MarkerArray::ConstPtr& raw)
{
    //Lists for point position and color to publish
    sensor_msgs::PointCloud2 octomap;
    sensor_msgs::PointCloud color_list;

    BOOST_FOREACH (const visualization_msgs::Marker& marker, raw->markers){
        if(marker.points.size() > (1.1*marker_count))
        {
            //store positions into points
            geometry_msgs::Point32 p;
            BOOST_FOREACH (const geometry_msgs::Point& pt, marker.points){
                  //std::cout << pt.x << ", " << pt.y << ", " << pt.z << "\n";
                  p.x = pt.x;
                  p.y = pt.y;
                  p.z = pt.z;
                  octomap.ConstPtr
                  octomap.points.push_back(p);
            }
            //store colors into colors

            /*
            pcl::PointCloud<pcl::PointXYZ>::Ptr input (new PointCloud);
            pcl::NormalEstimationOMP<pcl::PointXYZ, pcl::Normal> ne;
            pcl::search::KdTree<pcl::PointXYZ>::Ptr kdtree (new pcl::search::KdTree<PointXYZ>);
            kdtree->setInputCloud(octomap);
            ne.setInputCloud(octomap);
            ne.setSearchMethod (kdtree);
            ne.setKSearch (20);
            pcl::PointCloud<Normal>::Ptr normals (new pcl::PointCloud<Normal>);
            ne.compute (*normals);
            */
            geometry_msgs::Point32 color;
            BOOST_FOREACH (const std_msgs::ColorRGBA& rgba, marker.colors ){
                  //std::cout << "colour: " << rgba.r << "\n";
                  color.x = rgba.r;
                  color.y = rgba.g;
                  color.z = rgba.b;
                  color_list.points.push_back(color);

            }




            //Publish position and colors of each point in cloud
            points_publisher.publish(octomap);
            std::cout << "Published Points\n";
            ros::Duration(0.1).sleep();
            colors_publisher.publish(color_list);
            std::cout << "Published Colors\n";
            marker_count=marker.points.size();
            std::cout << "Marker Count: " << marker_count << "\n";
            std::cout << "Points Size: " << marker.points.size() << "\n";
            std::cout << "Colors Size: " << marker.colors.size() << "\n";

          }
    }
}

//}
int main(int argc, char** argv)
{
  ros::init(argc, argv, "pc2oculus");
  pubsub ps;
  ros::spin();
}
